# Config file for a generic GCC based compile,
# Using the reference LAPACK/Blas and assuming
# both LAPACK and CFITSIO are in /usr/local.


# =============== Installation ===================

# Final install location.  This defaults to a
# subdirectory of the top-level directory called
# install_$QUIET.
#export INSTALL := /usr/local


# =============== System Tools ===================

# The defaults should be fine for any normal
# GNU/Linux operating system...

# Here you can override the make version to use
#export MAKE := gmake

# How to make a tar.gz file
#export CTAR := tar czvf

# The archive command
#export AR := ar

# Archive options to create a library
#export ARFLAGS := crv

# The ranlib command
#export RANLIB := ranlib


# ================= Compilers ====================

# Serial Fortran 90 compiler.  Default is "f90".
export F90 := ftn

# MPI Fortran 90 compiler.  Default is "mpif90".
export MPF90 := ftn

# MPI Fortran 77 compiler.  Default is "mpif77".
export MPF77 := ftn

# MPI C compiler.  Default is "mpicc".
export MPCC := cc


# =========== Compiler Optimizations =============

# Compiler flags for all
COMMON_FLAGS := -O3 -fastsse -fPIC -Mcache_align -DpgiFortran
export F90FLAGS := $(COMMON_FLAGS) -traceback
# Fortran 77 compiler flags
export FFLAGS := $(COMMON_FLAGS)
# C compiler flags.
export CFLAGS := $(COMMON_FLAGS)
# Extra flags used for linking
export LDFLAGS := -lm -cxxlib
# F90 flags for OpenMP parallelization
export OPENMP = -openmp

ifeq ($(DEBUG), 1)
	BOUNDS := -check bounds
endif

COMMON_FLAGS_DEBUG := -O0 -g
COMMON_FLAGS_FORTRAN_DEBUG := $(COMMON_FLAGS_DEBUG) $(BOUNDS) -check format -check pointers -check uninit -check output_conversion -assume byterecl -traceback -heap-arrays 16384
#COMMON_FLAGS_FORTRAN_DEBUG := $(COMMON_FLAGS_DEBUG) -check bounds -check format -check pointers -check uninit -check output_conversion -assume byterecl
export F90FLAGS_DEBUG := -vec_report0 $(COMMON_FLAGS_FORTRAN_DEBUG)
export FFLAGS_DEBUG := $(COMMON_FLAGS_FORTRAN_DEBUG)
export CFLAGS_DEBUG := $(COMMON_FLAGS_DEBUG)
export LDFLAGS_DEBUG := -lm -cxxlib

# ============== Fortran Features ================
# Set this variable to 1 if the fortran compiler
# produces module files with capitalization (*.MOD)
# instead of lowercase (*.mod).
#export FORTRAN_UPPER := 1

# =============== CFITSIO Linking ================
# The include and linking commands for cfitsio.
export CFITSIO_INCLUDE := 
export CFITSIO_LINK := -L/usit/titan/u1/hke/local/lib -lcfitsio

# =============== LAPACK Linking =================
# The include and linking commands for LAPACK.
export LAPACK_INCLUDE := 
#export LAPACK_LINK := -L/site/intel/cmkl/8.1/lib/em64t/ -L/site/lib -lmkl_lapack64 -lmkl -lmkl_lapack32
export LAPACK_LINK := -shared-intel -Wl,-rpath,$(MKLPATH) -L$(MKLPATH)  -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core -lguide -lpthread

# =============== HEALPix Linking =================
# The include and linking commands for HEALPix.
export HEALPIX_INCLUDE := -I$(HEALPIX)/include
export HEALPIX_LINK := -L$(HEALPIX)/lib -lhealpix

export HEALPIX_INCLUDE_CPP := -I/usit/titan/u1/sigurdkn/local/include
export HEALPIX_LINK_CPP := -L/usit/titan/u1/sigurdkn/local/lib -lhealpix_cxx -lcxxsupport -lfftpack

export QPOINT_INCLUDE := -I/usit/titan/u1/sigurdkn/local/include
export QPOINT_LINK := -L/usit/titan/u1/sigurdkn/local/lib -lqpoint

export FFTW_INCLUDE := -I$(FFTW_INC)
export FFTW_LINK := -L$(FFTW_DIR) -lfftw3

# =============== Scalapack =======================
export SCALAPACK_LIBS := $(MKLPATH)/libmkl_scalapack_lp64.a $(MKLPATH)/libmkl_solver_lp64_sequential.a $(MKLPATH)/libmkl_intel_lp64.a $(MKLPATH)/libmkl_sequential.a $(MKLPATH)/libmkl_core.a $(MKLPATH)/libmkl_blacs_openmpi_lp64.a

# =============== NOVAS ============================
export NOVAS_LINK := -L/usit/titan/uq/sigurdkn/local/lib -lnovas

export PNG_LINK := -lpng
