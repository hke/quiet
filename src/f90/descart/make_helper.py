data_codes = {
	"real(8)" : "D",
	"real(4)" : "E",
	"integer(4)" : "J",
	"integer(2)" : "I",
#	"character" : "A",
	"logical"  : "L",
	"integer(1)" : "B",
}

body_template = """
subroutine get_column_by_name_%s(unit,name,data,status,case_sensitive,preallocated)
	integer(4) :: unit
	character(*) :: name
	logical(4), optional :: case_sensitive, preallocated
	%s, allocatable, dimension(:) :: data
	logical :: do_alloc
	character(8), parameter :: naxis2_keyword = "NAXIS2"
	integer nelements
	character(80) :: comment
	
	integer(4) :: case_sen
	integer(4) colnum,status
	real(8) :: nullval = -1.6375E30
	logical :: any_undefined_values
	
	status=0
	case_sen = 0
	if (present(case_sensitive)) then
		if (case_sensitive) case_sen = 1
	endif
	do_alloc = .true.
	if (present(preallocated)) then
		do_alloc = .not. preallocated
	endif
	call ftgcno(unit,case_sen,name,colnum,status)
	call report_fits_error(status, "Could not find column")
	if (status .ne. 0) return

	call ftgkyj(unit,naxis2_keyword,nelements,comment,status)
	call report_fits_error(status, "Could not read naxis2 keyword")
	if (status .ne. 0) return

	if (do_alloc) then
		allocate(data(nelements))
	else
		if (.not. allocated(data)) stop "Preallocate flag set but array not allocated in get_column_by_name"
		if (size(data)<nelements)stop "Preallocated array too small in get_column_by_name"
	endif

	call ftgcv%s(unit,colnum,1,1,nelements,nullval,data(1:nelements),any_undefined_values,status)
	call report_fits_error(status, "Could not load column data")
	if (status .ne. 0) return
	
end subroutine 
"""

overall_template = """
!
! This file is auto-generated by make_helper.py.
! There is no point editing it directly - changes will be lost.
! Edit make_helper.py instead.
!
! A few FITSIO helper routines.
!
module fits_helper
implicit none
interface get_column_by_name
	module procedure %s
end interface
contains

subroutine fatal_fits_error(status,message)
	integer :: status
	character(*) :: message

	call report_fits_error(status,message)
	if (status .ne. 0) stop

end subroutine fatal_fits_error

subroutine report_fits_error(status,message)
	integer :: status
	character(*) :: message
	
	if (status .ne. 0) then
		write(*,*) "FITS Error No:", status
		write(*,*) "from operation: ", trim(message)
	endif
end subroutine report_fits_error



%s
end module fits_helper
"""


f = open("fits_helper.f90","w")

body=""
interface_names=[]
for (declaration,datacode) in data_codes.iteritems():
	interface_names.append("get_column_by_name_%s"%datacode)
	body = body + (body_template % (datacode,declaration,datacode))
interface = ",".join(interface_names)
f.write(overall_template % (interface,body) )
f.close()